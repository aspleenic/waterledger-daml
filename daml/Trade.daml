-- Copyright (c) 2020 The DAML Authors. All rights reserved.
-- SPDX-License-Identifier: Apache-2.0

daml 1.2
module Trade where

type TradeCid = ContractId Trade

data TradeData = TradeData
  with
    uuid : Text
    amount : Decimal
    volume : Int
  deriving (Eq, Show)

data WorkflowData = WorkflowData
  with
    approved: Bool
    paymentMade: Bool
  deriving (Eq, Show)

template Trade
  with
    facilitator : Party
    authority : Party
    buyer : Party
    seller : Party
    currency : Text
    approved: Bool
    paymentMade: Bool
    uuid : Text
    amount : Int
    volume : Int
    observers : [Party]
  where
    ensure (amount > 0 && volume > 0)

    signatory buyer

    observer observers, authority

    controller facilitator can
      MakePayment : ContractId Trade
        do
          assert approved
          create this with paymentMade = True
      FacilitatorApproveTrade : ContractId Trade
        do
          -- not (assert approved)
          create this with approved = True

    controller seller can
      ConfirmPayment : ContractId Trade
        do
          assert approved
          create this with paymentMade = True

    controller authority can
      ApproveTrade : ContractId Trade
        do
          -- not (assert approved)
          create this with approved = True
      -- RejectTrade : ()
      --   do archive this

template TradeProposal
  with
    trade: Trade
  where
    signatory trade.facilitator
    controller trade.buyer can
      AcceptTradeIssuance: TradeCid
        do create trade

happyPath = scenario do

  authority <- getParty "SunWater"
  facilitator <- getParty "WaterLedger"
  seller <- getParty "Alice"
  buyer <- getParty "Bob"

  let uuid = "abc123"; currency = "AUD"; amount = 1000; volume = 50; paymentMade = False;

  createProposal <- submit facilitator do
    create TradeProposal
      with
        Trade
          with
            facilitator; authority; buyer; seller; approved = False; paymentMade = False; uuid; currency; amount; volume; observers = [authority]


  -- saleByAlice <- submit facilitator do
  --   create Trade
  --     with
  --       facilitator; authority; buyer; seller; approved = False; paymentMade = False; uuid; currency; amount; volume; observers = [authority]

  acceptedProposal <- submit buyer do exercise createProposal AcceptTradeIssuance
  authorityApproved <- submit authority do exercise acceptedProposal ApproveTrade
  facilitatorPaid <- submit facilitator do exercise authorityApproved MakePayment
  sellerConfirms <- submit seller do exercise facilitatorPaid ConfirmPayment

  return()